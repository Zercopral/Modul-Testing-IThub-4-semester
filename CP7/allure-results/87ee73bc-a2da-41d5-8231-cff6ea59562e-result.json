{"name": "Add single product to wishlist", "status": "broken", "statusDetails": {"message": "TypeError: Object of type set is not JSON serializable", "trace": "request = <SubRequest 'driver' for <Function test_add_product_to_wishlist>>\n\n    @pytest.fixture()\n    def driver(request):\n        executor = request.config.getoption(\"--executor\")\n        # base_url = request.config.getoption(\"--base_url\")\n        browser_name = request.config.getoption(\"--browser\")\n        headless = request.config.getoption(\"--headless\")\n        log_level = request.config.getoption(\"--log_level\")\n    \n        logger = logging.getLogger(request.node.name)\n        file_handler = logging.FileHandler(f\"logs/{request.node.name}.log\")\n        file_handler.setFormatter(logging.Formatter(\"%(levelname)s %(message)s\"))\n        logger.addHandler(file_handler)\n        logger.setLevel(level=log_level)\n    \n        logger.info(\n            \"===> Test %s started at %s\" % (request.node.name, datetime.datetime.now())\n        )\n    \n        executor_url = f\"http://{executor}:4444/wd/hub\"\n        # service = Service()\n    \n        if browser_name == \"chrome\":\n            options = Options()\n            if headless:\n                options.add_argument(\"headless=new\")\n            # browser = webdriver.Chrome(service=service, options=options)\n            options = Options()\n            options.headless = headless\n        elif browser_name == \"firefox\":\n            options = FirefoxOptions()\n            # browser = webdriver.Firefox(service=service, options=options)\n            options.headless = headless\n        else:\n            raise NotImplemented()\n        # options.add_argument(f'{\"selenoid:options\"}': {\"enableVideo\": True})\n        options.set_capability('selenoid:options', {'enableVideo', True})\n    \n>       browser = webdriver.Remote(command_executor=executor_url, options=options)\n\nbrowser_name = 'firefox'\nexecutor   = 'localhost'\nexecutor_url = 'http://localhost:4444/wd/hub'\nfile_handler = <FileHandler D:\\Programming\\IThub\\TestWeb\\CP7\\logs\\test_add_product_to_wishlist.log (NOTSET)>\nheadless   = False\nlog_level  = 'INFO'\nlogger     = <Logger test_add_product_to_wishlist (INFO)>\noptions    = <selenium.webdriver.firefox.options.Options object at 0x0000029B6EAFA480>\nrequest    = <SubRequest 'driver' for <Function test_add_product_to_wishlist>>\n\nconftest.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\n        _ignore_local_proxy = False\n        capabilities = {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}\n        command_executor = 'http://localhost:4444/wd/hub'\n        file_detector = None\n        keep_alive = True\n        options    = <selenium.webdriver.firefox.options.Options object at 0x0000029B6EAFA480>\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n        capabilities = {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}\n        caps       = {'capabilities': {'alwaysMatch': {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}, 'firstMatch': [{}]}}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    response = self.command_executor.execute(driver_command, params)\n        driver_command = 'newSession'\n        params     = {'capabilities': {'alwaysMatch': {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}, 'firstMatch': [{}]}}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:298: in execute\n    data = utils.dump_json(params)\n        command    = 'newSession'\n        command_info = ('POST', '/session')\n        params     = {'capabilities': {'alwaysMatch': {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}, 'firstMatch': [{}]}}\n        path       = '/session'\n        path_string = '/session'\n        self       = <selenium.webdriver.firefox.remote_connection.FirefoxRemoteConnection object at 0x0000029B6EAFACF0>\n        substitute_params = set()\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\utils.py:24: in dump_json\n    return json.dumps(json_struct)\n        json_struct = {'capabilities': {'alwaysMatch': {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}, 'firstMatch': [{}]}}\nC:\\Python312\\Lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n        allow_nan  = True\n        check_circular = True\n        cls        = None\n        default    = None\n        ensure_ascii = True\n        indent     = None\n        kw         = {}\n        obj        = {'capabilities': {'alwaysMatch': {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}, 'firstMatch': [{}]}}\n        separators = None\n        skipkeys   = False\n        sort_keys  = False\nC:\\Python312\\Lib\\json\\encoder.py:200: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n        o          = {'capabilities': {'alwaysMatch': {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}, 'firstMatch': [{}]}}\n        self       = <json.encoder.JSONEncoder object at 0x0000029B6BABE1E0>\nC:\\Python312\\Lib\\json\\encoder.py:258: in iterencode\n    return _iterencode(o, 0)\n        _encoder   = <built-in function encode_basestring_ascii>\n        _iterencode = <_json.Encoder object at 0x0000029B6EB5A020>\n        _one_shot  = True\n        floatstr   = <function JSONEncoder.iterencode.<locals>.floatstr at 0x0000029B6EB1C680>\n        markers    = {2866600298080: {'enableVideo', True}, 2866602570624: {'capabilities': {'alwaysMatch': {'acceptInsecureCerts': True, '...efox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}, 'firstMatch': [{}]}}\n        o          = {'capabilities': {'alwaysMatch': {'acceptInsecureCerts': True, 'browserName': 'firefox', 'moz:debuggerAddress': True, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, ...}, 'firstMatch': [{}]}}\n        self       = <json.encoder.JSONEncoder object at 0x0000029B6BABE1E0>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x0000029B6BABE1E0>, o = {'enableVideo', True}\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type set is not JSON serializable\n\no          = {'enableVideo', True}\nself       = <json.encoder.JSONEncoder object at 0x0000029B6BABE1E0>\n\nC:\\Python312\\Lib\\json\\encoder.py:180: TypeError"}, "attachments": [{"name": "log", "source": "22daa6b4-a72a-4af7-9b1e-49ebedd433de-attachment.txt", "type": "text/plain"}], "start": 1717746185851, "stop": 1717746185851, "uuid": "cf08b786-15fd-49b1-a1d9-5526e4eb11af", "historyId": "ddf21380f5f2c13439978ed916d6cec7", "testCaseId": "ddf21380f5f2c13439978ed916d6cec7", "fullName": "selenium_cp7#test_add_product_to_wishlist", "labels": [{"name": "story", "value": "Add product to cart"}, {"name": "feature", "value": "Wishlist"}, {"name": "suite", "value": "selenium_cp7"}, {"name": "host", "value": "DESKTOP-RTLEB7L"}, {"name": "thread", "value": "15332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "selenium_cp7"}]}