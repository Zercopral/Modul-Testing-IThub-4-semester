{"name": "Check the screenshot switching", "status": "failed", "statusDetails": {"message": "AssertionError: No element in vision ('css selector', '.product-thumb')", "trace": "self = <page_objects.MainPage.MainPage object at 0x0000011EFDCAF590>, locator = ('css selector', '.product-thumb')\n\n    def elements(self, locator: tuple):\n        try:\n            self.logger.debug(\n                \"%s: Check if elements %s is present\" % (self.class_name, str(locator))\n            )\n>           return WebDriverWait(self.driver, 5).until(EC.visibility_of_all_elements_located(locator))\n\nlocator    = ('css selector', '.product-thumb')\nself       = <page_objects.MainPage.MainPage object at 0x0000011EFDCAF590>\n\npage_objects\\BasePage.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c7addbee-f1ce-4a6a-9bfb-723a07f6b438\")>, method = <function visibility_of_all_elements_located.<locals>._predicate at 0x0000011EFDDB1760>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nend_time   = 30621.437\nmessage    = ''\nmethod     = <function visibility_of_all_elements_located.<locals>._predicate at 0x0000011EFDDB1760>\nscreen     = None\nself       = <selenium.webdriver.support.wait.WebDriverWait (session=\"c7addbee-f1ce-4a6a-9bfb-723a07f6b438\")>\nstacktrace = None\nvalue      = []\n\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"c7addbee-f1ce-4a6a-9bfb-723a07f6b438\")>\n\n    @allure.feature(\"Product\")\n    @allure.title(\"Check the screenshot switching\")\n    def test_product_screens(driver):\n>       MainPage(driver).click_featured_product(3)\n\ndriver     = <selenium.webdriver.remote.webdriver.WebDriver (session=\"c7addbee-f1ce-4a6a-9bfb-723a07f6b438\")>\n\nselenium_cp7.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\MainPage.py:36: in click_featured_product\n    self.choose_featured_product(index).click()\n        index      = 3\n        self       = <page_objects.MainPage.MainPage object at 0x0000011EFDCAF590>\npage_objects\\MainPage.py:30: in choose_featured_product\n    selected_product = self.elements(self.FEATURED_PRODUCTS)[index]\n        index      = 3\n        self       = <page_objects.MainPage.MainPage object at 0x0000011EFDCAF590>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page_objects.MainPage.MainPage object at 0x0000011EFDCAF590>, locator = ('css selector', '.product-thumb')\n\n    def elements(self, locator: tuple):\n        try:\n            self.logger.debug(\n                \"%s: Check if elements %s is present\" % (self.class_name, str(locator))\n            )\n            return WebDriverWait(self.driver, 5).until(EC.visibility_of_all_elements_located(locator))\n        except TimeoutException:\n>           raise AssertionError(f\"No element in vision {locator}\")\nE           AssertionError: No element in vision ('css selector', '.product-thumb')\n\nlocator    = ('css selector', '.product-thumb')\nself       = <page_objects.MainPage.MainPage object at 0x0000011EFDCAF590>\n\npage_objects\\BasePage.py:63: AssertionError"}, "attachments": [{"name": "log", "source": "aa96c90b-4ead-424a-b70c-db6bcee14da7-attachment.txt", "type": "text/plain"}], "start": 1717746231709, "stop": 1717746237174, "uuid": "c76a1ce9-8b33-46be-8ec5-668dade84f0b", "historyId": "a5ff1fe51169e77b4a05190e15002495", "testCaseId": "a5ff1fe51169e77b4a05190e15002495", "fullName": "selenium_cp7#test_product_screens", "labels": [{"name": "feature", "value": "Product"}, {"name": "suite", "value": "selenium_cp7"}, {"name": "host", "value": "DESKTOP-RTLEB7L"}, {"name": "thread", "value": "31964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "selenium_cp7"}]}