{"name": "test_admin_add_new_products", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: Unable to clear element that cannot be edited: <iframe class=\"cke_wysiwyg_frame cke_reset\" src=\"\">\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5\nInvalidElementStateError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:416:5\ninteraction.clearElement@chrome://remote/content/marionette/interaction.sys.mjs:373:11\nclearElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:195:22\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16", "trace": "driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"cdced569-c9b6-412a-a49a-af71e3951644\")>\n\n    def test_admin_add_new_products(driver):\n        driver.get(\"http:/localhost/administration/\")\n        AdminPage(driver).login(\"user\", \"bitnami\")\n    \n        products = [\n            ['Keyboard GSX 1', 'The best keyboard for gamers', 'Devices'],\n            ['Keyboard GSX PRO 3000', 'The best of the best keyboard for gamers', 'Devices'],\n            ['Mouse GSM 13', 'Good model for beginners', 'Devices'],\n            ['Mouse GSM 100', 'The best mouse for gamers', 'Devices']\n            ]\n    \n        for product in products:\n            name, description, category = product\n>           AdminPage(driver).add_product(name, description, category)\n\ncategory   = 'Devices'\ndescription = 'The best keyboard for gamers'\ndriver     = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"cdced569-c9b6-412a-a49a-af71e3951644\")>\nname       = 'Keyboard GSX 1'\nproduct    = ['Keyboard GSX 1', 'The best keyboard for gamers', 'Devices']\nproducts   = [['Keyboard GSX 1', 'The best keyboard for gamers', 'Devices'], ['Keyboard GSX PRO 3000', 'The best of the best keyboa...'], ['Mouse GSM 13', 'Good model for beginners', 'Devices'], ['Mouse GSM 100', 'The best mouse for gamers', 'Devices']]\n\nselenium_cp5.py:235: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\AdminPage.py:88: in add_product\n    self._input(self.element(self.ADD_GENERAL_DESCRIPTION), device_description)\n        category_name = 'Devices'\n        device_description = 'The best keyboard for gamers'\n        device_name = 'Keyboard GSX 1'\n        self       = <page_objects.AdminPage.AdminPage object at 0x0000027729CEF2F0>\npage_objects\\BasePage.py:30: in _input\n    element.clear()\n        element    = <selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"d6bcea97-0dad-4bcc-97db-58905f404ee0\")>\n        self       = <page_objects.AdminPage.AdminPage object at 0x0000027729CEF2F0>\n        value      = 'The best keyboard for gamers'\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:117: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"d6bcea97-0dad-4bcc-97db-58905f404ee0\")>\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n        command    = 'clearElement'\n        params     = {'id': 'd6bcea97-0dad-4bcc-97db-58905f404ee0'}\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"d6bcea97-0dad-4bcc-97db-58905f404ee0\")>\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'clearElement'\n        params     = {}\n        response   = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"Unable to clear element that cannot be ...sys.mjs:195:22\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16\\\\n\"}}'}\n        self       = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"cdced569-c9b6-412a-a49a-af71e3951644\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002772764F9B0>, response = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"Unable to clear element that cannot be ...sys.mjs:195:22\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: Unable to clear element that cannot be edited: <iframe class=\"cke_wysiwyg_frame cke_reset\" src=\"\">\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5\nE       InvalidElementStateError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:416:5\nE       interaction.clearElement@chrome://remote/content/marionette/interaction.sys.mjs:373:11\nE       clearElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:195:22\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16\n\ne          = <selenium.webdriver.remote.errorhandler.ErrorCode object at 0x0000027729CEF5F0>\nerror_code = 'INVALID_ELEMENT_STATE'\nerror_codes = ['ELEMENT_CLICK_INTERCEPTED', 'ELEMENT_IS_NOT_SELECTABLE', 'ELEMENT_NOT_INTERACTABLE', 'ELEMENT_NOT_VISIBLE', 'IME_ENGINE_ACTIVATION_FAILED', 'IME_NOT_AVAILABLE', ...]\nerror_info = [12, 'invalid element state']\nexception_class = <class 'selenium.common.exceptions.InvalidElementStateException'>\njson       = <module 'json' from 'C:\\\\Python312\\\\Lib\\\\json\\\\__init__.py'>\nmessage    = 'Unable to clear element that cannot be edited: <iframe class=\"cke_wysiwyg_frame cke_reset\" src=\"\">'\nresponse   = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"Unable to clear element that cannot be ...sys.mjs:195:22\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16\\\\n\"}}'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002772764F9B0>\nst_value   = 'RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\\nWebDriverError@chrome://remote/content/shared/web...Child.sys.mjs:195:22\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16\\n'\nstacktrace = ['RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8', 'WebDriverError@chrome://remote/content/shared/...sys.mjs:195:22', 'receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16', ...]\nstatus     = 'invalid element state'\nvalue      = {'error': 'invalid element state', 'message': 'Unable to clear element that cannot be edited: <iframe class=\"cke_wysiw...hild.sys.mjs:195:22\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16\\n'}\nvalue_json = '{\"value\":{\"error\":\"invalid element state\",\"message\":\"Unable to clear element that cannot be edited: <iframe class=\\\\\"....sys.mjs:195:22\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16\\\\n\"}}'\n\nC:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidElementStateException"}, "steps": [{"name": "_input", "status": "passed", "steps": [{"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"b9c56712-6bba-45e9-b47f-e51a8ebeb880\")>"}], "start": 1713257899577, "stop": 1713257900014}], "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"b9c56712-6bba-45e9-b47f-e51a8ebeb880\")>"}, {"name": "value", "value": "'user'"}], "start": 1713257899577, "stop": 1713257900034}, {"name": "_input", "status": "passed", "steps": [{"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"c2ddb913-8229-4d2e-9138-5279da60a4d4\")>"}], "start": 1713257900052, "stop": 1713257900444}], "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"c2ddb913-8229-4d2e-9138-5279da60a4d4\")>"}, {"name": "value", "value": "'bitnami'"}], "start": 1713257900052, "stop": 1713257900456}, {"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"994ce0cc-bf59-4b1e-a5c9-194679706a0a\")>"}], "start": 1713257900472, "stop": 1713257900880}, {"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"3c4baf5e-59df-4f84-b4fc-77ff540ea149\")>"}], "start": 1713257901420, "stop": 1713257901815}, {"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"d426a283-83bb-4ca6-a219-bf53c3c22cf4\")>"}], "start": 1713257902343, "stop": 1713257902746}, {"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"b076d7e2-8e7d-4971-b815-fae9778f22e9\")>"}], "start": 1713257903263, "stop": 1713257903676}, {"name": "_input", "status": "passed", "steps": [{"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"f7640f88-f4ec-4df2-ae0f-1a8444a0cb4e\")>"}], "start": 1713257904195, "stop": 1713257904605}], "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"f7640f88-f4ec-4df2-ae0f-1a8444a0cb4e\")>"}, {"name": "value", "value": "'Keyboard GSX 1'"}], "start": 1713257904195, "stop": 1713257904623}, {"name": "_input", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: Unable to clear element that cannot be edited: <iframe class=\"cke_wysiwyg_frame cke_reset\" src=\"\">\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5\nInvalidElementStateError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:416:5\ninteraction.clearElement@chrome://remote/content/marionette/interaction.sys.mjs:373:11\nclearElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:195:22\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:80:16\n\n", "trace": "  File \"C:\\Python312\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\Programming\\IThub\\TestWeb\\CP5Selenium\\page_objects\\BasePage.py\", line 30, in _input\n    element.clear()\n  File \"C:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 117, in clear\n    self._execute(Command.CLEAR_ELEMENT)\n  File \"C:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "click", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"d6bcea97-0dad-4bcc-97db-58905f404ee0\")>"}], "start": 1713257904636, "stop": 1713257905034}], "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"cdced569-c9b6-412a-a49a-af71e3951644\", element=\"d6bcea97-0dad-4bcc-97db-58905f404ee0\")>"}, {"name": "value", "value": "'The best keyboard for gamers'"}], "start": 1713257904636, "stop": 1713257905040}], "attachments": [{"name": "log", "source": "eaf717fe-1678-46ae-b68a-aa6d36f1c662-attachment.txt", "type": "text/plain"}], "start": 1713257899248, "stop": 1713257905056, "uuid": "700d1b5b-51c8-457c-b9ba-1bf9515e979a", "historyId": "7f8927a2a3f26d83a7bc65852657451c", "testCaseId": "7f8927a2a3f26d83a7bc65852657451c", "fullName": "selenium_cp5#test_admin_add_new_products", "labels": [{"name": "suite", "value": "selenium_cp5"}, {"name": "host", "value": "DESKTOP-RTLEB7L"}, {"name": "thread", "value": "24316-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "selenium_cp5"}]}