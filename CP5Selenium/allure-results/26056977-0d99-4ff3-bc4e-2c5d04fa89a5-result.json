{"name": "test_admin_add_new_category", "status": "broken", "statusDetails": {"message": "requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='objects.githubusercontent.com', port=443): Read timed out. (read timeout=None)", "trace": "self = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>, conn = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>, method = 'GET'\nurl = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream', body = None\nheaders = HTTPHeaderDict({'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}), retries = Retry(total=0, connect=None, read=False, redirect=None, status=None), timeout = Timeout(connect=None, read=None, total=None), chunked = False\nresponse_conn = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>, preload_content = False, decode_content = False, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n>               self._validate_conn(conn)\n\nbody       = None\nchunked    = False\nconn       = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\ndecode_content = False\nenforce_content_length = True\nheaders    = HTTPHeaderDict({'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'})\nmethod     = 'GET'\nnew_e      = ReadTimeoutError(\"HTTPSConnectionPool(host='objects.githubusercontent.com', port=443): Read timed out. (read timeout=None)\")\npreload_content = False\nresponse_conn = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\nretries    = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nself       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\ntimeout    = Timeout(connect=None, read=None, total=None)\ntimeout_obj = Timeout(connect=None, read=None, total=None)\nurl        = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\n\nC:\\Python312\\Lib\\site-packages\\urllib3\\connectionpool.py:467: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python312\\Lib\\site-packages\\urllib3\\connectionpool.py:1099: in _validate_conn\n    conn.connect()\n        __class__  = <class 'urllib3.connectionpool.HTTPSConnectionPool'>\n        conn       = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\n        self       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\nC:\\Python312\\Lib\\site-packages\\urllib3\\connection.py:653: in connect\n    sock_and_verified = _ssl_wrap_socket_and_match_hostname(\n        is_time_off = False\n        self       = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\n        server_hostname = 'objects.githubusercontent.com'\n        server_hostname_rm_dot = 'objects.githubusercontent.com'\n        sock       = <socket.socket [closed] fd=-1, family=2, type=1, proto=0>\n        tls_in_tls = False\nC:\\Python312\\Lib\\site-packages\\urllib3\\connection.py:806: in _ssl_wrap_socket_and_match_hostname\n    ssl_sock = ssl_wrap_socket(\n        assert_fingerprint = None\n        assert_hostname = None\n        ca_cert_data = None\n        ca_cert_dir = None\n        ca_certs   = 'C:\\\\Python312\\\\Lib\\\\site-packages\\\\certifi\\\\cacert.pem'\n        cert_file  = None\n        cert_reqs  = 'CERT_REQUIRED'\n        context    = <ssl.SSLContext object at 0x000001CD8EE1E750>\n        default_ssl_context = True\n        key_file   = None\n        key_password = None\n        normalized = 'objects.githubusercontent.com'\n        server_hostname = 'objects.githubusercontent.com'\n        sock       = <socket.socket [closed] fd=-1, family=2, type=1, proto=0>\n        ssl_context = None\n        ssl_maximum_version = None\n        ssl_minimum_version = None\n        ssl_version = None\n        tls_in_tls = False\nC:\\Python312\\Lib\\site-packages\\urllib3\\util\\ssl_.py:465: in ssl_wrap_socket\n    ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls, server_hostname)\n        ca_cert_data = None\n        ca_cert_dir = None\n        ca_certs   = 'C:\\\\Python312\\\\Lib\\\\site-packages\\\\certifi\\\\cacert.pem'\n        cert_reqs  = None\n        certfile   = None\n        ciphers    = None\n        context    = <ssl.SSLContext object at 0x000001CD8EE1E750>\n        key_password = None\n        keyfile    = None\n        server_hostname = 'objects.githubusercontent.com'\n        sock       = <socket.socket [closed] fd=-1, family=2, type=1, proto=0>\n        ssl_context = <ssl.SSLContext object at 0x000001CD8EE1E750>\n        ssl_version = None\n        tls_in_tls = False\nC:\\Python312\\Lib\\site-packages\\urllib3\\util\\ssl_.py:509: in _ssl_wrap_socket_impl\n    return ssl_context.wrap_socket(sock, server_hostname=server_hostname)\n        server_hostname = 'objects.githubusercontent.com'\n        sock       = <socket.socket [closed] fd=-1, family=2, type=1, proto=0>\n        ssl_context = <ssl.SSLContext object at 0x000001CD8EE1E750>\n        tls_in_tls = False\nC:\\Python312\\Lib\\ssl.py:455: in wrap_socket\n    return self.sslsocket_class._create(\n        do_handshake_on_connect = True\n        self       = <ssl.SSLContext object at 0x000001CD8EE1E750>\n        server_hostname = 'objects.githubusercontent.com'\n        server_side = False\n        session    = None\n        sock       = <socket.socket [closed] fd=-1, family=2, type=1, proto=0>\n        suppress_ragged_eofs = True\nC:\\Python312\\Lib\\ssl.py:1042: in _create\n    self.do_handshake()\n        __class__  = <class 'ssl.SSLSocket'>\n        cls        = <class 'ssl.SSLSocket'>\n        connected  = True\n        context    = <ssl.SSLContext object at 0x000001CD8EE1E750>\n        do_handshake_on_connect = True\n        kwargs     = {'family': <AddressFamily.AF_INET: 2>, 'fileno': 868, 'proto': 0, 'type': <SocketKind.SOCK_STREAM: 1>}\n        self       = <ssl.SSLSocket [closed] fd=-1, family=2, type=1, proto=0>\n        server_hostname = 'objects.githubusercontent.com'\n        server_side = False\n        session    = None\n        sock       = <socket.socket [closed] fd=-1, family=2, type=1, proto=0>\n        sock_timeout = None\n        suppress_ragged_eofs = True\n        timeout    = None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ssl.SSLSocket [closed] fd=-1, family=2, type=1, proto=0>, block = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           TimeoutError: [WinError 10060] Попытка установить соединение была безуспешной, т.к. от другого компьютера за требуемое время не получен нужный отклик, или было разорвано уже установленное соединение из-за неверного отклика уже подключенного компьютера\n\nblock      = False\nself       = <ssl.SSLSocket [closed] fd=-1, family=2, type=1, proto=0>\ntimeout    = None\n\nC:\\Python312\\Lib\\ssl.py:1320: TimeoutError\n\nThe above exception was the direct cause of the following exception:\n\nself = <requests.adapters.HTTPAdapter object at 0x000001CD8EE16D50>, request = <PreparedRequest [GET]>, stream = True, timeout = Timeout(connect=None, read=None, total=None), verify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n>           resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n\ncert       = None\nchunked    = False\nconn       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\nproxies    = OrderedDict()\nrequest    = <PreparedRequest [GET]>\nself       = <requests.adapters.HTTPAdapter object at 0x000001CD8EE16D50>\nstream     = True\ntimeout    = Timeout(connect=None, read=None, total=None)\nurl        = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\nverify     = True\n\nC:\\Python312\\Lib\\site-packages\\requests\\adapters.py:486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python312\\Lib\\site-packages\\urllib3\\connectionpool.py:847: in urlopen\n    retries = retries.increment(\n        assert_same_host = False\n        body       = None\n        body_pos   = None\n        chunked    = False\n        clean_exit = False\n        conn       = None\n        decode_content = False\n        destination_scheme = None\n        err        = None\n        headers    = HTTPHeaderDict({'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'})\n        http_tunnel_required = False\n        method     = 'GET'\n        new_e      = ReadTimeoutError(\"HTTPSConnectionPool(host='objects.githubusercontent.com', port=443): Read timed out. (read timeout=None)\")\n        parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/github-production-release-asset-2e65be/25354393/e3588aca-c70a...achment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream', fragment=None)\n        pool_timeout = None\n        preload_content = False\n        redirect   = False\n        release_conn = False\n        release_this_conn = True\n        response_conn = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\n        response_kw = {}\n        retries    = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n        self       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\n        timeout    = Timeout(connect=None, read=None, total=None)\n        timeout_obj = Timeout(connect=None, read=None, total=None)\n        url        = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\nC:\\Python312\\Lib\\site-packages\\urllib3\\util\\retry.py:470: in increment\n    raise reraise(type(error), error, _stacktrace)\n        _pool      = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\n        _stacktrace = <traceback object at 0x000001CD8EE3CC40>\n        cause      = 'unknown'\n        connect    = None\n        error      = ReadTimeoutError(\"HTTPSConnectionPool(host='objects.githubusercontent.com', port=443): Read timed out. (read timeout=None)\")\n        method     = 'GET'\n        other      = None\n        read       = False\n        redirect   = None\n        redirect_location = None\n        response   = None\n        self       = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n        status     = None\n        status_count = None\n        total      = -1\n        url        = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\nC:\\Python312\\Lib\\site-packages\\urllib3\\util\\util.py:39: in reraise\n    raise value\n        tb         = None\n        tp         = <class 'urllib3.exceptions.ReadTimeoutError'>\n        value      = None\nC:\\Python312\\Lib\\site-packages\\urllib3\\connectionpool.py:793: in urlopen\n    response = self._make_request(\n        assert_same_host = False\n        body       = None\n        body_pos   = None\n        chunked    = False\n        clean_exit = False\n        conn       = None\n        decode_content = False\n        destination_scheme = None\n        err        = None\n        headers    = HTTPHeaderDict({'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'})\n        http_tunnel_required = False\n        method     = 'GET'\n        new_e      = ReadTimeoutError(\"HTTPSConnectionPool(host='objects.githubusercontent.com', port=443): Read timed out. (read timeout=None)\")\n        parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/github-production-release-asset-2e65be/25354393/e3588aca-c70a...achment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream', fragment=None)\n        pool_timeout = None\n        preload_content = False\n        redirect   = False\n        release_conn = False\n        release_this_conn = True\n        response_conn = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\n        response_kw = {}\n        retries    = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n        self       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\n        timeout    = Timeout(connect=None, read=None, total=None)\n        timeout_obj = Timeout(connect=None, read=None, total=None)\n        url        = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\nC:\\Python312\\Lib\\site-packages\\urllib3\\connectionpool.py:491: in _make_request\n    raise new_e\n        body       = None\n        chunked    = False\n        conn       = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\n        decode_content = False\n        enforce_content_length = True\n        headers    = HTTPHeaderDict({'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'})\n        method     = 'GET'\n        new_e      = ReadTimeoutError(\"HTTPSConnectionPool(host='objects.githubusercontent.com', port=443): Read timed out. (read timeout=None)\")\n        preload_content = False\n        response_conn = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\n        retries    = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n        self       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\n        timeout    = Timeout(connect=None, read=None, total=None)\n        timeout_obj = Timeout(connect=None, read=None, total=None)\n        url        = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\nC:\\Python312\\Lib\\site-packages\\urllib3\\connectionpool.py:469: in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n        body       = None\n        chunked    = False\n        conn       = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\n        decode_content = False\n        enforce_content_length = True\n        headers    = HTTPHeaderDict({'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'})\n        method     = 'GET'\n        new_e      = ReadTimeoutError(\"HTTPSConnectionPool(host='objects.githubusercontent.com', port=443): Read timed out. (read timeout=None)\")\n        preload_content = False\n        response_conn = <urllib3.connection.HTTPSConnection object at 0x000001CD8EE16AB0>\n        retries    = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n        self       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\n        timeout    = Timeout(connect=None, read=None, total=None)\n        timeout_obj = Timeout(connect=None, read=None, total=None)\n        url        = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>, err = TimeoutError(10060, 'Попытка установить соединение была безуспешной, т.к. от другого компьютера за требуемое время не ...и было разорвано уже установленное соединение из-за неверного отклика уже подключенного компьютера', None, 10060, None)\nurl = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream', timeout_value = None\n\n    def _raise_timeout(\n        self,\n        err: BaseSSLError | OSError | SocketTimeout,\n        url: str,\n        timeout_value: _TYPE_TIMEOUT | None,\n    ) -> None:\n        \"\"\"Is the error actually a timeout? Will raise a ReadTimeout or pass\"\"\"\n    \n        if isinstance(err, SocketTimeout):\n>           raise ReadTimeoutError(\n                self, url, f\"Read timed out. (read timeout={timeout_value})\"\n            ) from err\nE           urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='objects.githubusercontent.com', port=443): Read timed out. (read timeout=None)\n\nerr        = TimeoutError(10060, 'Попытка установить соединение была безуспешной, т.к. от другого компьютера за требуемое время не ...и было разорвано уже установленное соединение из-за неверного отклика уже подключенного компьютера', None, 10060, None)\nself       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\ntimeout_value = None\nurl        = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\n\nC:\\Python312\\Lib\\site-packages\\urllib3\\connectionpool.py:370: ReadTimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'driver' for <Function test_admin_add_new_category>>\n\n    @pytest.fixture()\n    def driver(request):\n        base_url = request.config.getoption(\"--base_url\")\n        browser_name = request.config.getoption(\"--browser\")\n        headless = request.config.getoption(\"--headless\")\n        log_level = request.config.getoption(\"--log_level\")\n    \n        logger = logging.getLogger(request.node.name)\n        file_handler = logging.FileHandler(f\"logs/{request.node.name}.log\")\n        file_handler.setFormatter(logging.Formatter(\"%(levelname)s %(message)s\"))\n        logger.addHandler(file_handler)\n        logger.setLevel(level=log_level)\n    \n        logger.info(\n            \"===> Test %s started at %s\" % (request.node.name, datetime.datetime.now())\n        )\n    \n        service = Service()\n    \n        if browser_name == \"chrome\":\n            options = Options()\n            if headless:\n                options.add_argument(\"headless=new\")\n            browser = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n            options = Options()\n            options.headless = headless\n        elif browser_name == \"firefox\":\n            options = FirefoxOptions()\n>           browser = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=options)\n\nbase_url   = 'http:/localhost'\nbrowser_name = 'firefox'\nfile_handler = <FileHandler D:\\Programming\\IThub\\TestWeb\\CP5Selenium\\logs\\test_admin_add_new_category.log (NOTSET)>\nheadless   = False\nlog_level  = 'INFO'\nlogger     = <Logger test_admin_add_new_category (INFO)>\noptions    = <selenium.webdriver.firefox.options.Options object at 0x000001CD8E099400>\nrequest    = <SubRequest 'driver' for <Function test_admin_add_new_category>>\nservice    = <selenium.webdriver.chrome.service.Service object at 0x000001CD8ED9CF80>\n\nconftest.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python312\\Lib\\site-packages\\webdriver_manager\\firefox.py:39: in install\n    driver_path = self._get_driver_binary_path(self.driver)\n        self       = <webdriver_manager.firefox.GeckoDriverManager object at 0x000001CD8E099340>\nC:\\Python312\\Lib\\site-packages\\webdriver_manager\\core\\manager.py:40: in _get_driver_binary_path\n    file = self._download_manager.download_file(driver.get_driver_download_url(os_type))\n        binary_path = None\n        driver     = <webdriver_manager.drivers.firefox.GeckoDriver object at 0x000001CD8EE14CE0>\n        os_type    = 'win64'\n        self       = <webdriver_manager.firefox.GeckoDriverManager object at 0x000001CD8E099340>\nC:\\Python312\\Lib\\site-packages\\webdriver_manager\\core\\download_manager.py:29: in download_file\n    response = self._http_client.get(url)\n        self       = <webdriver_manager.core.download_manager.WDMDownloadManager object at 0x000001CD8EE14BF0>\n        url        = 'https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-win64.zip'\nC:\\Python312\\Lib\\site-packages\\webdriver_manager\\core\\http.py:32: in get\n    resp = requests.get(\n        kwargs     = {}\n        self       = <webdriver_manager.core.http.WDMHttpClient object at 0x000001CD8EE14C20>\n        url        = 'https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-win64.zip'\nC:\\Python312\\Lib\\site-packages\\requests\\api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n        kwargs     = {'stream': True, 'verify': True}\n        params     = None\n        url        = 'https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-win64.zip'\nC:\\Python312\\Lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n        kwargs     = {'params': None, 'stream': True, 'verify': True}\n        method     = 'get'\n        session    = <requests.sessions.Session object at 0x000001CD8EDBE9C0>\n        url        = 'https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-win64.zip'\nC:\\Python312\\Lib\\site-packages\\requests\\sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n        allow_redirects = True\n        auth       = None\n        cert       = None\n        cookies    = None\n        data       = None\n        files      = None\n        headers    = None\n        hooks      = None\n        json       = None\n        method     = 'get'\n        params     = None\n        prep       = <PreparedRequest [GET]>\n        proxies    = {}\n        req        = <Request [GET]>\n        self       = <requests.sessions.Session object at 0x000001CD8EDBE9C0>\n        send_kwargs = {'allow_redirects': True, 'cert': None, 'proxies': OrderedDict(), 'stream': True, ...}\n        settings   = {'cert': None, 'proxies': OrderedDict(), 'stream': True, 'verify': True}\n        stream     = True\n        timeout    = None\n        url        = 'https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-win64.zip'\n        verify     = True\nC:\\Python312\\Lib\\site-packages\\requests\\sessions.py:725: in send\n    history = [resp for resp in gen]\n        adapter    = <requests.adapters.HTTPAdapter object at 0x000001CD8EE16D50>\n        allow_redirects = True\n        elapsed    = 0.6934879999998884\n        gen        = <generator object SessionRedirectMixin.resolve_redirects at 0x000001CD8EDFA2A0>\n        hooks      = {'response': []}\n        kwargs     = {'cert': None, 'proxies': OrderedDict(), 'stream': True, 'timeout': None, ...}\n        r          = <Response [302]>\n        request    = <PreparedRequest [GET]>\n        self       = <requests.sessions.Session object at 0x000001CD8EDBE9C0>\n        start      = 5800.832184\n        stream     = True\nC:\\Python312\\Lib\\site-packages\\requests\\sessions.py:266: in resolve_redirects\n    resp = self.send(\n        adapter_kwargs = {}\n        cert       = None\n        header     = 'Transfer-Encoding'\n        headers    = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n        hist       = [<Response [302]>]\n        parsed     = ParseResult(scheme='https', netloc='objects.githubusercontent.com', path='/github-production-release-asset-2e65be/2535...ttachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream', fragment='')\n        prepared_request = <PreparedRequest [GET]>\n        previous_fragment = ''\n        proxies    = OrderedDict()\n        purged_headers = ('Content-Length', 'Content-Type', 'Transfer-Encoding')\n        req        = <PreparedRequest [GET]>\n        resp       = <Response [302]>\n        rewindable = False\n        self       = <requests.sessions.Session object at 0x000001CD8EDBE9C0>\n        stream     = True\n        timeout    = None\n        url        = 'https://objects.githubusercontent.com/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\n        verify     = True\n        yield_requests = False\nC:\\Python312\\Lib\\site-packages\\requests\\sessions.py:703: in send\n    r = adapter.send(request, **kwargs)\n        adapter    = <requests.adapters.HTTPAdapter object at 0x000001CD8EE16D50>\n        allow_redirects = False\n        hooks      = {'response': []}\n        kwargs     = {'cert': None, 'proxies': OrderedDict(), 'stream': True, 'timeout': None, ...}\n        request    = <PreparedRequest [GET]>\n        self       = <requests.sessions.Session object at 0x000001CD8EDBE9C0>\n        start      = 5801.5263467\n        stream     = True\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x000001CD8EE16D50>, request = <PreparedRequest [GET]>, stream = True, timeout = Timeout(connect=None, read=None, total=None), verify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n    \n        except (ProtocolError, OSError) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n    \n            raise ConnectionError(e, request=request)\n    \n        except ClosedPoolError as e:\n            raise ConnectionError(e, request=request)\n    \n        except _ProxyError as e:\n            raise ProxyError(e)\n    \n        except (_SSLError, _HTTPError) as e:\n            if isinstance(e, _SSLError):\n                # This branch is for urllib3 versions earlier than v1.22\n                raise SSLError(e, request=request)\n            elif isinstance(e, ReadTimeoutError):\n>               raise ReadTimeout(e, request=request)\nE               requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='objects.githubusercontent.com', port=443): Read timed out. (read timeout=None)\n\ncert       = None\nchunked    = False\nconn       = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001CD8EE16C30>\nproxies    = OrderedDict()\nrequest    = <PreparedRequest [GET]>\nself       = <requests.adapters.HTTPAdapter object at 0x000001CD8EE16D50>\nstream     = True\ntimeout    = Timeout(connect=None, read=None, total=None)\nurl        = '/github-production-release-asset-2e65be/25354393/e3588aca-c70a-4a56-96a3-a43f357ed922?X-Amz-Algorithm=AWS4-HMAC-SHA25...-disposition=attachment%3B%20filename%3Dgeckodriver-v0.34.0-win64.zip&response-content-type=application%2Foctet-stream'\nverify     = True\n\nC:\\Python312\\Lib\\site-packages\\requests\\adapters.py:532: ReadTimeout"}, "attachments": [{"name": "log", "source": "32f7a090-5157-478a-b678-9c526c4b8854-attachment.txt", "type": "text/plain"}], "start": 1713219289095, "stop": 1713219289095, "uuid": "6a6a9452-e51a-4c62-bd13-f4d40b3f89e3", "historyId": "d5f614fc8f8e675a9f5115c2f57cd179", "testCaseId": "d5f614fc8f8e675a9f5115c2f57cd179", "fullName": "selenium_cp5#test_admin_add_new_category", "labels": [{"name": "suite", "value": "selenium_cp5"}, {"name": "host", "value": "DESKTOP-RTLEB7L"}, {"name": "thread", "value": "14880-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "selenium_cp5"}]}